<% provide(:flow, @device.product.model_class_name + "," + I18n.t("titles.settings.upnp")) %>
<% provide(:tab, 'my_devices') %>

<div class="upnp zyxel_content" style="max-width:700px;" ng-app="upnp_app"  ng-controller="UpnpCtrl" ng-init="session=<%= @session.to_json() %>;loadConfig();">

  <%# Pairing information %>
  <div  ng-switch on="step">
    <div class="waiting text-center" ng-switch-when="updating">
      <div class="zyxel_span2">
        <%= I18n.t("warnings.settings.upnp.sync") %>
      </div>
    </div>
    <div ng-switch-when="form">
      <div ng-switch on="result">
        <h2 ng-switch-when="true" class="zyxel_h2_icon1">
          <%= image_tag @device.product.asset.url(:medium) %>
          <span>{{wording}}</span>
        </h2>
      </div>
      <table ng-table class="zyxel_table_style5">
        <tr>
          <th><%= I18n.t("labels.settings.upnp.table_head1") %></th>
          <th><%= I18n.t("labels.settings.upnp.table_head2") %></th>
          <th><%= I18n.t("labels.settings.upnp.table_head3") %></th>
          <th><%= I18n.t("labels.settings.upnp.table_head4") %></th>
          <th ng-if="!submited">
            <button id="mods_v2_upnp_show_serviceport_show_button" class="zyxel_btn_style2" ng-show="!servicePort.show" ng-click="showServicePort()"><%= I18n.t("labels.settings.upnp.table_head6") %></button>
            <button id="mods_v2_upnp_show_serviceport_hide_button" class="zyxel_btn_style2" ng-show="servicePort.show" ng-click="hideServicePort()"><%= I18n.t("labels.settings.upnp.table_head7") %></button>
          </th>
          <th ng-if="submited"><%= I18n.t("labels.settings.upnp.table_head8") %></th>
          <%# display update result after submited %>
          <th ng-if="submited">
            <%= I18n.t("labels.settings.upnp.table_head5") %>
          </th>
        </tr>
        <tr ng-repeat="service in service_list" ng-controller="ServiceCtrl" ng-init="checkService();">
          <td data-title="'enabled'" class="column1">
            <div ng-switch on="result">
              <input id="check{{$index}}" type="checkbox" ng-model="service.enabled" ng-disabled="panel != 'form'" >
              <div ng-switch-when="true">
                <label><span></span></label>
              </div>
              <div ng-switch-when="false">
                <label for="check{{$index}}"><span></span></label>
              </div>
            </div>
          </td>
          <td data-title="'status'" ng-switch on="service.status" class="column2">
            <span ng-switch-when="true" class="">OK</span>
            <span ng-switch-when="false" class="">---</span>
          </td>
          <td data-title="'Name'" style="max-width: 165px; word-wrap: break-word;">
            <%# add service link %>
            <a ng-if="service.status && !isFieldEmpty(service.path)" href="{{bind_url(service, service.path, service.port)}}" target="_blank" class="upnp service_list_name">
              {{service.service_name}}
            </a>
            <span ng-if="(!service.status) || isFieldEmpty(service.path)">
              {{service.service_name}}
            </span>
          </td>
          <td data-title="'description'" class="column3" style="max-width: 220px; word-wrap: break-word;">
            {{service.description}}
          </td>
          <td data-title="'service_port'" class="column3">

            <input ng-model="service.wan_port" ng-show="(servicePort.show || submited) && result != 'true' " type="text" class="text-center" maxlength="5" size="7" numbers-only="numbers-only" ng-blur="onBlurValidatePort($index);" ng-focus="onFocusRecordPort();"/>
            <span ng-show="result == 'true'">{{service.wan_port}}</span>

          </td>
          <td data-title="'error_code'" class="update_result" ng-if="submited">
            <span ng-switch on="service.update_result">
              <span ng-switch-when="no_update"><%= I18n.t("labels.settings.upnp.result.no_update") %></span>
              <span ng-switch-when="success" class="green"><%= I18n.t("labels.settings.upnp.result.success") %></span>
              <span ng-switch-when="failure" class="red"><%= I18n.t("labels.settings.upnp.result.failure") %></span>
            </span>
          </td>
        </tr>
      </table>
    </div>
    <div class="waiting" ng-switch-when="failure">
      <span class="zyxel_span4">{{error_msg}}</span>
    </div>
    <div class="waiting" ng-switch-when="confirm_cancel">
      <span class="zyxel_span4"><%= I18n.t("warnings.settings.upnp.cancel_instruction") %></span>
    </div>
  </div>
  <%# Pairing information - end %>

  <%# Bottom content include loading image and retry button %>
  <div class="pairing-panel" ng-switch on="panel">
    <div ng-switch-when="loading">
      <div class="waiting"><%= image_tag 'loading.gif', size: "54x55" %></div>
      <div class="zyxel_btn_area i18n_fix" ng-if="!submited">
        <button id="mods_v2_upnp_show_loading_cancel_button" class="zyxel_btn_back" ng-click="cancel()"><%= I18n.t("labels.cancel") %></button>
      </div>
    </div>
    <div ng-switch-when="retry" class="zyxel_btn_area i18n_fix">
      <%= link_to(I18n.t("labels.cancel"), "/personal/index", class: "zyxel_btn_back") %>
      <button id="mods_v2_upnp_show_retry_button" class="zyxel_btn_submit" ng-click="retry()"><%= I18n.t("labels.retry") %></button>
    </div>
    <div ng-switch-when="form" class="zyxel_btn_area i18n_fix">
      <%= link_to(I18n.t("labels.cancel"), "/personal/index", class: "zyxel_btn_back") %>
      <button id="mods_v2_upnp_show_retry_submit_button" class="zyxel_btn_submit" ng-click="submit()"><%= I18n.t("labels.submit") %></button>
    </div>
    <div ng-switch-when="confirm" class="zyxel_btn_area i18n_fix">
      <%= link_to(I18n.t("labels.confirm"), tutorial_path(@device, Mods::V2::Upnp::MODULE_NAME), class: "zyxel_btn_ok") %>
    </div>
    <div ng-switch-when="confirm_cancel" class="zyxel_btn_area  i18n_fix">
      <button id="mods_v2_upnp_show_retry_cancel_button" class="zyxel_btn_back" ng-click="continue()"><%= I18n.t("labels.cancel") %></button>
      <%= link_to(I18n.t("labels.confirm"), "/{{moduleVersion}}/upnp/cancel/#{@upnp.id}", class: "zyxel_btn_ok zyxel_enabled") %>
    </div>
  </div>
  <%# Bottom content include loading image and retry button - end %>
</div>

<script type="text/javascript">
  var upnp_app = angular.module('upnp_app', ['timer']);
  upnp_app.config([
    '$httpProvider',
    function($httpProvider) {
        $httpProvider.defaults.headers
          .common["X-CSRF-TOKEN"] = $("meta[name=\"csrf-token\"]").attr("content");
    }
  ]);

  upnp_app.controller('ServiceCtrl', function ($scope, $http, $timeout) {

    $scope.enabled = $scope.service['enabled'];
    $scope.status = $scope.service['status'];
    $scope.on_focus_port;
    $scope.wan_port = $scope.service['wan_port'];


    // 所有重算 port 號執行條件：
    // 1. wan_port 等於 -1。
    // 2. service 未啟用且存在於已被使用的 port list 當中。
    // 3. service 的 port 有被修改，且更新失敗。
    $scope.checkService = function(){
      var wan_port = $scope.wan_port;
      var service_status = $scope.status;
      $scope.service.origin_wan_port = wan_port;

      // 載入列表時，重新計算 port 號的條件：
      // 1. 更新完成之前才需計算，更新完成的畫面不計算。
      // 2. 如果 port 號為 -1。
      // 3. 如果服務尚未啟用，且 port 號存在於已被使用的 port 號列表。
      if($scope.result == 'false'){
        if( (wan_port == '-1') ||
            (!service_status && $scope.used_wan_port_list.length > 0 && $scope.used_wan_port_list.indexOf(parseInt(wan_port)) > -1) ){
          $scope.service['wan_port'] = $scope.randomPort();
        }
      }

      // 當更新設定後： (updated_list 為 reload 前所記錄的列表更新結果)
      if($scope.submited && $scope.updated_list.length > 0){
        angular.forEach($scope.updated_list, function(updated_setting, index){
          if($scope.service['service_name'] == updated_setting['service_name']){
            $scope.service['update_result'] = updated_setting['update_result'];
            if(updated_setting['update_result'] == 'success'){
              //  如果 update 成功，應該把 update_list 當中所改到的設定顯示在畫面上，
              //  畫面上的(service_list)狀態顯示應該要與更新過的(updated_list)相同，
              //  wan_port 欄位應顯示更新後的(udpate_list) wan_port。
              $scope.service['wan_port'] = updated_setting['wan_port'];
              $scope.service['status'] = updated_setting['enabled'];
              $scope.service['enabled'] = updated_setting['enabled'];

            }else if(updated_setting['update_result'] == 'failure'){
              // 重新套用使用者先前的操作
              $scope.service['enabled'] = updated_setting['enabled'];
              // 若有修改 port，則重新計算 port 號
              if(updated_setting['is_service_port_modified']){
                $scope.service['wan_port'] = $scope.randomPort();
              }
            }
          }
        });
      }
    }

    // 驗證輸入的 port 號
    $scope.onBlurValidatePort = function(service_index){
      // var service = $scope.service_list[service_index];
      var service = $scope.service;
      if(service.wan_port == ''){
        service.wan_port = service.on_focus_port;
      }
      if(service.wan_port < 1 || service.wan_port > 65535){
        service.wan_port = service.on_focus_port;
      }
      // 判斷輸入的 port 號是否與畫面上的其他 service 重複
      angular.forEach($scope.service_list, function(service_on_page, index){
        if(service['service_name'] != service_on_page['service_name'] && service['wan_port'] == service_on_page['wan_port']){
          service['wan_port'] = service['on_focus_port'];
        }
      });
    }
    // 游標停駐輸入框時，記錄 wan port 輸入框中的 port 號
    $scope.onFocusRecordPort = function(){
      $scope.service.on_focus_port = $scope.service.wan_port;
    }

    // 重新計算port號
    $scope.randomPort = function(){
      var rand_num = $scope.getRandomIntInclusive(65535, 1025);
      if($scope.used_wan_port_list.indexOf(rand_num) > -1 || $scope.randomed_num_list.indexOf(rand_num) > -1){
        rand_num = $scope.randomPort();
      }
      $scope.randomed_num_list.push(rand_num);
      return rand_num;
    }

    // 產生區間亂數
    $scope.getRandomIntInclusive = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

  });

  upnp_app.controller('UpnpCtrl', function ($scope, $http, $timeout) {

    $scope.session;
    $scope.moduleVersion = '<%= @device.get_module_version("upnp") %>';
    $scope.indexPath = '/' + $scope.moduleVersion + '/upnp/';
    $scope.checkPath = '/' + $scope.moduleVersion + '/upnp/check/';
    $scope.reloadPath = '/' + $scope.moduleVersion + '/upnp/reload/';
    $scope.step = "updating";
    $scope.panel = "loading";
    $scope.result = "false"
    $scope.loadTimes = 0;
    $scope.checkTimes = 0;
    $scope.timesLimit = 85;
    $scope.interval = 3500;
    $scope.pathIp;
    $scope.wording;
    $scope.get_list = false;
    $scope.submited = false;
    $scope.showPort = false;
    $scope.service_url = "";
    $scope.error_msg = "";
    $scope.servicePort = { show: false };
    $scope.updated_list = [];
    $scope.used_wan_port_list = [];
    $scope.service_list = [];
    $scope.randomed_num_list = [];

    $scope.init = function(){
      $scope.step = "updating";
      $scope.panel = "loading";
      $scope.disableBtn();
      $scope.wording = '';
      $scope.loadConfig();
    };

    $scope.loadConfig = function(){
      $scope.hideServicePort();
      $timeout(function() {
        $scope.loadTimes++;
        $http.get($scope.indexPath + $scope.session.id + "/edit", { cache: false }).success(function(response) {
          switch(response.status){
            case 'form':
              $scope.used_wan_port_list = response.used_wan_port_list;
              $scope.service_list = response.service_list;
              $scope.pathIp = response.path_ip;
              $scope.get_list = response;
              if($scope.step != "confirm_cancel") {
                $scope.formPanel(response);
              }
              return;
            case 'failure':
              $scope.get_failure(response);
            case 'timeout':
              $scope.get_failure(response);
              return;
          }

          if($scope.loadTimes < $scope.timesLimit){
            $scope.loadConfig();
            return;
          }

          $scope.get_failure(response);
        });
      }, $scope.interval);

      $scope.disableBtn();
    };

    $scope.get_failure = function(response) {
      $scope.error_msg = response.error_message;
      $scope.loadTimes = 0;
      $scope.step = "failure";
      $scope.panel = "retry";
      $scope.enableBtn();
    };

    $scope.submit = function(){
      angular.forEach($scope.service_list, function(service, index){
        if(!service.enabled){
          service.wan_port = service.origin_wan_port;
        }
      });
      $http.put($scope.indexPath + $scope.session.id, $scope.session, { cache: false }).success(function(response){
        if(response.result){
          $scope.checkSubmit();
        }
      });

      $scope.submited = true;
      $scope.step = "updating"
      $scope.panel = "loading";
      $scope.disableBtn();
    };
    $scope.retry = function(){
      location.reload();
    };

    $scope.cancel = function() {
      $scope.step = "confirm_cancel";
      $scope.panel = "confirm_cancel";
    };

    $scope.continue = function() {
      if($scope.get_list.status == "form") {
        $scope.formPanel($scope.get_list);
      } else {
        $scope.step = "updating";
        $scope.panel = "loading";
      }
      $scope.get_list = false;
    }

    $scope.bind_url = function(service, path, port){
      $scope.service_url = path.replace(/(\/\/+)[^:]*(:)[^\/]*(\/?.*)/, '$1' + $scope.pathIp + '$2' + port + '$3');
      return $scope.service_url;
    };

    $scope.checkSubmit = function(){
      $timeout(function() {
        $http.get($scope.checkPath + $scope.session.id, { cache: false }).success(function(response){
          $scope.checkTimes++;
          switch(response.status){
            case 'updated':
              $scope.updated_list = response.service_list;
              $scope.successPanel(response);
              return;
            case 'reload':
              // 暫存 updated_list
              $scope.updated_list = response.service_list;
              $scope.reloadService();
              return;
            case 'timeout': // if device is offline, status will be set to timeout by portal
              $scope.get_failure(response);
              return;
          }
          if($scope.checkTimes < $scope.timesLimit){
            $scope.checkSubmit();
          }else{
            $scope.checkTimes = 0;
            $scope.step = "failure";
            $scope.panel = "retry";
            $scope.enableBtn();
          }
        });
      }, $scope.interval);

      $scope.disableBtn();
    };

    $scope.reloadService = function(){
      $timeout(function() {
        $scope.loadTimes++;
        $http.get($scope.reloadPath + $scope.session.id, { cache: false }).success(function(response) {
          switch(response.status){
            case 'start':
              if($scope.checkTimes < $scope.timesLimit){
                $scope.reloadService();
              }else{
                $scope.checkTimes = 0;
                $scope.step = "failure";
                $scope.panel = "retry";
                $scope.enableBtn();
              }
              return;
            case 'form':
              $scope.service_list = response.service_list;
              $scope.formPanel(response);
              return;
            case 'failure':
              response.status = 'form';
              response.service_list = $scope.updated_list;
              $scope.formPanel(response);
              return;
            case 'timeout':
              response.status = 'form';
              response.service_list = $scope.updated_list;
              $scope.formPanel(response);
              return;
          } // switch(response.status){....}
        });
      }, $scope.interval);
    }

    $scope.disableBtn = function(){
      var allButton = document.querySelectorAll("a:not(.zyxel_enabled)");
      for(var i=0; i<allButton.length; i++){
        var $thisBtn = allButton[i];
        var $thisUrl = $thisBtn.getAttribute('href');
        if ($thisUrl != "#"){
          $thisBtn.setAttribute('data-href', $thisUrl);
          $thisBtn.setAttribute('href', '#');
        };
      };
    };

    $scope.formPanel = function(response){
      $scope.step = response.status;
      $scope.panel = response.status;
      $scope.enableBtn();
      $scope.session = response;
      $scope.service_list = response.service_list;
    }

    $scope.successPanel = function(response){
      $scope.step = "form";
      $scope.panel = 'confirm';
      $scope.enableBtn();
      $scope.result = "true";
      $scope.service_list = response.service_list;
      $scope.wording = '<%= I18n.t("warnings.settings.upnp.success") %>';
    }

    $scope.isFieldEmpty = function(name){
      name = name.split(' ').join('');
      return (typeof(name) == 'undefined' || name == null || name.length == 0);
    }

    $scope.enableBtn = function(){
      var allButton = document.querySelectorAll("a[data-href]:not(.zyxel_enabled)");
      for(var i=0; i<allButton.length; i++){
        var $thisBtn = allButton[i];
        var $dataUrl = $thisBtn.getAttribute('data-href');
        $thisBtn.setAttribute('href', $dataUrl);
      };
    };

    // click the "show service port" button
    $scope.showServicePort = function(){
      $scope.servicePort.show = true;
    }

    // click the "hide service port" button
    $scope.hideServicePort = function(){
      $scope.servicePort.show = false;
    }

  });

  // 在input[type='text']的tag中加入numbers-only屬性，則限制只能輸入數字
  upnp_app.directive('numbersOnly', function(){
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, modelCtrl) {
        modelCtrl.$parsers.push(function (inputValue) {
          if (inputValue == undefined) return '';
          var transformedInput = inputValue.replace(/[^0-9]/g, '');
          if (transformedInput!=inputValue) {
              modelCtrl.$setViewValue(transformedInput);
              modelCtrl.$render();
          }
          return transformedInput;
        });
      }
    };
  });

</script>
<!-- % end % -->
